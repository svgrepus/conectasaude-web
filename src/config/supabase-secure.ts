/**
 * üîß CONFIGURA√á√ÉO √öNICA DO SUPABASE - ARQUITETURA SEGURA
 * 
 * Este √© o √öNICO local onde as configura√ß√µes do Supabase devem ser alteradas.
 * Todos os servi√ßos da aplica√ß√£o devem importar deste arquivo.
 * 
 * ‚ö†Ô∏è IMPORTANTE: Nunca coloque credenciais sens√≠veis diretamente no c√≥digo!
 * Use sempre vari√°veis de ambiente para produ√ß√£o.
 * 
 * üìã Como usar:
 * 1. Para desenvolvimento: Copie .env.example para .env.local
 * 2. Para produ√ß√£o: Configure as vari√°veis no seu provedor de deploy
 * 3. Para Expo: Configure no app.json na se√ß√£o "extra"
 * 4. Para alterar configura√ß√£o: Edite supabase.master.config.js e execute npm run update-all-configs
 */

import Constants from 'expo-constants';

/**
 * üîÑ Sincronizado automaticamente em: 2025-09-13T17:42:46.587Z
 * üì• Fonte: supabase.master.config.js
 */
import { SUPABASE_MASTER_CONFIG } from '../../supabase.master.config.js';

/**
 * üîÑ NUNCA MAIS HARDCODE - USA MASTER CONFIG COMO FALLBACK
 * üì• Fonte: supabase.master.config.js
 */

// üåç Configura√ß√µes de ambiente
const ENV = {
  isDevelopment: process.env.NODE_ENV === 'development',
  isProduction: process.env.NODE_ENV === 'production',
} as const;

// üîë Fun√ß√£o para obter a URL do Supabase de forma segura
const getSupabaseUrl = (): string => {
  // Ordem de prioridade:
  // 1. Expo Constants (app.json)
  // 2. Vari√°veis de ambiente Expo
  // 3. Vari√°veis de ambiente React
  // 4. Fallback para desenvolvimento (apenas)
  
  const url = Constants.expoConfig?.extra?.EXPO_PUBLIC_SUPABASE_URL ||
              process.env.EXPO_PUBLIC_SUPABASE_URL ||
              process.env.REACT_APP_SUPABASE_URL ||
              SUPABASE_MASTER_CONFIG.URL; // ‚Üê USA MASTER CONFIG, N√ÉO HARDCODE
  
  if (!url) {
    throw new Error('üö® URL do Supabase n√£o configurada! Verifique suas vari√°veis de ambiente.');
  }
  
  if (!url.includes('.supabase.co')) {
    console.warn('‚ö†Ô∏è URL do Supabase pode estar incorreta:', url);
  }
  
  return url;
};

// üîë Fun√ß√£o para obter a chave an√¥nima do Supabase de forma segura
const getSupabaseAnonKey = (): string => {
  const key = Constants.expoConfig?.extra?.EXPO_PUBLIC_SUPABASE_ANON_KEY ||
              process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY ||
              process.env.REACT_APP_SUPABASE_ANON_KEY ||
              SUPABASE_MASTER_CONFIG.ANON_KEY; // ‚Üê USA MASTER CONFIG, N√ÉO HARDCODE
  
  if (!key) {
    throw new Error('üö® Chave do Supabase n√£o configurada! Verifique suas vari√°veis de ambiente.');
  }
  
  if (!key.startsWith('eyJ')) {
    console.warn('‚ö†Ô∏è Chave do Supabase pode estar incorreta');
  }
  
  return key;
};

/**
 * üè† CONFIGURA√á√ÉO CENTRAL DO SUPABASE
 * 
 * Esta √© a √öNICA fonte da verdade para todas as configura√ß√µes do Supabase.
 * Todos os servi√ßos devem usar essas configura√ß√µes.
 */
export const SUPABASE_CONFIG = {
  // URLs e chaves obtidas de forma segura
  url: getSupabaseUrl(),
  anonKey: getSupabaseAnonKey(),
  
  // Configura√ß√µes de ambiente
  env: ENV,
  
  // Configura√ß√µes adicionais do cliente
  options: {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: false,
    },
    db: {
      schema: 'public',
    },
    global: {
      headers: {
        'X-Client-Info': 'conecta-saude-web',
      },
    },
  },
} as const;

/**
 * üì° ENDPOINTS CENTRALIZADOS
 * 
 * Todos os endpoints do Supabase organizados por categoria.
 */
export const SUPABASE_ENDPOINTS = {
  // API REST para opera√ß√µes CRUD
  rest: `${SUPABASE_CONFIG.url}/rest/v1`,
  
  // Autentica√ß√£o
  auth: `${SUPABASE_CONFIG.url}/auth/v1`,
  
  // Storage para arquivos
  storage: `${SUPABASE_CONFIG.url}/storage/v1`,
  
  // Real-time para subscriptions
  realtime: `${SUPABASE_CONFIG.url}/realtime/v1`,
  
  // Edge Functions
  functions: `${SUPABASE_CONFIG.url}/functions/v1`,
} as const;

/**
 * üîß GERADOR DE HEADERS PADRONIZADOS
 * 
 * Todos os servi√ßos devem usar esta fun√ß√£o para gerar headers consistentes.
 * 
 * @param accessToken Token de acesso do usu√°rio (opcional)
 * @returns Headers padronizados para requisi√ß√µes
 */
export const getSupabaseHeaders = (accessToken?: string): Record<string, string> => {
  const headers: Record<string, string> = {
    'apikey': SUPABASE_CONFIG.anonKey,
    'Content-Type': 'application/json',
    'Prefer': 'return=representation',
    'X-Client-Info': 'conecta-saude-web',
  };

  // Adicionar token de autoriza√ß√£o se fornecido
  if (accessToken) {
    headers['Authorization'] = `Bearer ${accessToken}`;
  }

  return headers;
};

/**
 * üß™ VALIDA√á√ÉO DE CONFIGURA√á√ÉO
 * 
 * Fun√ß√£o para validar se todas as configura√ß√µes est√£o corretas.
 * √ötil para debug e troubleshooting.
 */
export const validateSupabaseConfig = (): {
  isValid: boolean;
  errors: string[];
  config: object;
} => {
  const errors: string[] = [];
  
  // Validar URL
  if (!SUPABASE_CONFIG.url) {
    errors.push('URL do Supabase n√£o configurada');
  } else if (!SUPABASE_CONFIG.url.includes('.supabase.co')) {
    errors.push('URL do Supabase parece estar incorreta');
  }
  
  // Validar chave
  if (!SUPABASE_CONFIG.anonKey) {
    errors.push('Chave an√¥nima do Supabase n√£o configurada');
  } else if (!SUPABASE_CONFIG.anonKey.startsWith('eyJ')) {
    errors.push('Chave an√¥nima do Supabase parece estar incorreta');
  }
  
  return {
    isValid: errors.length === 0,
    errors,
    config: {
      url: SUPABASE_CONFIG.url,
      hasValidKey: SUPABASE_CONFIG.anonKey.length > 100,
      environment: SUPABASE_CONFIG.env.isDevelopment ? 'development' : 'production',
      endpoints: SUPABASE_ENDPOINTS,
    },
  };
};

// üìä Log de configura√ß√£o apenas em desenvolvimento
if (SUPABASE_CONFIG.env.isDevelopment) {
  const validation = validateSupabaseConfig();
  
  if (validation.isValid) {
    console.log('‚úÖ Configura√ß√£o do Supabase validada:', validation.config);
  } else {
    console.error('‚ùå Problemas na configura√ß√£o do Supabase:', validation.errors);
  }
}
